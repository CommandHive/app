generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["public"]
}

model Account {
  id                String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId            String    @map("user_id") @db.Uuid
  type              String    @db.VarChar(50)
  provider          String    @db.VarChar(50)
  providerAccountId String    @map("provider_account_id") @db.VarChar(255)
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?   @db.VarChar(50)
  scope             String?
  id_token          String?
  session_state     String?
  created_at        DateTime? @default(now()) @db.Timestamptz(6)
  updated_at        DateTime? @default(now()) @db.Timestamptz(6)
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([provider, providerAccountId])
  @@index([userId], map: "idx_accounts_user_id")
  @@map("accounts")
  @@schema("public")
}

model chat_messages {
  id            String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  session_id    String        @db.Uuid
  role          String        @db.VarChar(50)
  content       String
  metadata      Json?
  created_at    DateTime?     @default(now()) @db.Timestamptz(6)
  chat_sessions chat_sessions @relation(fields: [session_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([created_at], map: "idx_chat_messages_created_at")
  @@index([session_id], map: "idx_chat_messages_session_id")
  @@schema("public")
}

model chat_sessions {
  id            String          @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id       String          @db.Uuid
  title         String          @db.VarChar(255)
  created_at    DateTime?       @default(now()) @db.Timestamptz(6)
  updated_at    DateTime?       @default(now()) @db.Timestamptz(6)
  chat_messages chat_messages[]
  user          User            @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([user_id], map: "idx_chat_sessions_user_id")
  @@schema("public")
}

model password_reset_tokens {
  id         String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id    String    @db.Uuid
  token      String    @unique @db.VarChar(255)
  expires    DateTime  @db.Timestamptz(6)
  used       Boolean   @default(false)
  used_at    DateTime? @db.Timestamptz(6)
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  user       User      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([expires], map: "idx_password_reset_tokens_expires")
  @@index([user_id], map: "idx_password_reset_tokens_user_id")
  @@schema("public")
}

model permissions {
  id               String             @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name             String             @unique @db.VarChar(100)
  description      String?
  resource         String?            @db.VarChar(100)
  action           String?            @db.VarChar(100)
  created_at       DateTime?          @default(now()) @db.Timestamptz(6)
  role_permissions role_permissions[]

  @@schema("public")
}

model role_permissions {
  id            String      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  role_id       String      @db.Uuid
  permission_id String      @db.Uuid
  granted_at    DateTime?   @default(now()) @db.Timestamptz(6)
  permissions   permissions @relation(fields: [permission_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  roles         roles       @relation(fields: [role_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([role_id, permission_id])
  @@index([permission_id], map: "idx_role_permissions_permission_id")
  @@index([role_id], map: "idx_role_permissions_role_id")
  @@schema("public")
}

model roles {
  id               String             @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name             String             @unique @db.VarChar(100)
  description      String?
  created_at       DateTime?          @default(now()) @db.Timestamptz(6)
  updated_at       DateTime?          @default(now()) @db.Timestamptz(6)
  role_permissions role_permissions[]
  user_roles       user_roles[]

  @@schema("public")
}

model server_usage_logs {
  id                String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  server_id         String    @db.Uuid
  tool_name         String?   @db.VarChar(255)
  client_identifier String?   @db.VarChar(255)
  request_data      Json?
  response_status   Int?
  response_time_ms  Int?
  error_message     String?
  ip_address        String?   @db.Inet
  user_agent        String?
  created_at        DateTime? @default(now()) @db.Timestamptz(6)
  servers           servers   @relation(fields: [server_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([created_at], map: "idx_server_usage_logs_created_at")
  @@index([server_id], map: "idx_server_usage_logs_server_id")
  @@schema("public")
}

model server_versions {
  id           String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  server_id    String    @db.Uuid
  version      String    @db.VarChar(50)
  source_code  String?
  package_json Json?
  changelog    String?
  created_by   String    @db.Uuid
  created_at   DateTime? @default(now()) @db.Timestamptz(6)
  user         User      @relation(fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  servers      servers   @relation(fields: [server_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([server_id, version])
  @@index([server_id], map: "idx_server_versions_server_id")
  @@index([version], map: "idx_server_versions_version")
  @@schema("public")
}

model servers {
  id                String              @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id           String              @db.Uuid
  name              String              @db.VarChar(255)
  slug              String              @unique @db.VarChar(255)
  description       String?
  version           String?             @default("1.0.0") @db.VarChar(50)
  status            String?             @default("inactive") @db.VarChar(50)
  visibility        String?             @default("private") @db.VarChar(50)
  source_code       String?
  package_json      Json?
  environment_vars  Json?
  container_id      String?             @db.VarChar(255)
  deployment_url    String?
  health_check_url  String?
  last_deployed_at  DateTime?           @db.Timestamptz(6)
  total_requests    Int?                @default(0)
  last_accessed_at  DateTime?           @db.Timestamptz(6)
  tags              String[]
  category          String?             @db.VarChar(100)
  is_featured       Boolean?            @default(false)
  created_at        DateTime?           @default(now()) @db.Timestamptz(6)
  updated_at        DateTime?           @default(now()) @db.Timestamptz(6)
  server_usage_logs server_usage_logs[]
  server_versions   server_versions[]
  user              User                @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([category], map: "idx_servers_category")
  @@index([is_featured], map: "idx_servers_is_featured")
  @@index([slug], map: "idx_servers_slug")
  @@index([status], map: "idx_servers_status")
  @@index([user_id], map: "idx_servers_user_id")
  @@index([visibility], map: "idx_servers_visibility")
  @@schema("public")
}

model Session {
  id           String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  sessionToken String    @unique @map("session_token") @db.VarChar(255)
  userId       String    @map("user_id") @db.Uuid
  expires      DateTime  @db.Timestamptz(6)
  ip_address   String?   @db.Inet
  user_agent   String?
  created_at   DateTime? @default(now()) @db.Timestamptz(6)
  updated_at   DateTime? @default(now()) @db.Timestamptz(6)
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([expires], map: "idx_sessions_expires")
  @@index([userId], map: "idx_sessions_user_id")
  @@map("sessions")
  @@schema("public")
}

model user_roles {
  id          String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id     String    @db.Uuid
  role_id     String    @db.Uuid
  assigned_at DateTime? @default(now()) @db.Timestamptz(6)
  assigned_by String?   @db.Uuid
  roles       roles     @relation(fields: [role_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user        User      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, role_id])
  @@index([role_id], map: "idx_user_roles_role_id")
  @@index([user_id], map: "idx_user_roles_user_id")
  @@schema("public")
}

model User {
  id                    String                  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  wallet_address        String?                 @unique @db.VarChar(255)
  email                 String?                 @unique @db.VarChar(255)
  emailVerified         DateTime?               @map("email_verified") @db.Timestamptz(6)
  username              String?                 @unique @db.VarChar(255)
  name                  String?                 @map("display_name") @db.VarChar(255)
  image                 String?                 @map("avatar_url")
  github_id             String?                 @unique @db.VarChar(255)
  google_id             String?                 @unique @db.VarChar(255)
  created_at            DateTime?               @default(now()) @db.Timestamptz(6)
  updated_at            DateTime?               @default(now()) @db.Timestamptz(6)
  is_active             Boolean?                @default(true)
  subscription_tier     String?                 @default("free") @db.VarChar(50)
  nonce                 String?                 @db.VarChar(255)
  nonce_expires_at      DateTime?               @db.Timestamptz(6)
  backup_codes          String[]
  last_login_at         DateTime?               @db.Timestamptz(6)
  locked_until          DateTime?               @db.Timestamptz(6)
  login_attempts        Int?                    @default(0)
  password_hash         String?                 @db.VarChar(255)
  two_factor_enabled    Boolean?                @default(false)
  two_factor_secret     String?                 @db.VarChar(255)
  accounts              Account[]
  chat_sessions         chat_sessions[]
  password_reset_tokens password_reset_tokens[]
  server_versions       server_versions[]
  servers               servers[]
  sessions              Session[]
  user_roles            user_roles[]

  @@index([emailVerified], map: "idx_users_email_verified")
  @@index([last_login_at], map: "idx_users_last_login_at")
  @@map("users")
  @@schema("public")
}

model VerificationToken {
  id         String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  identifier String    @db.VarChar(255)
  token      String    @unique @db.VarChar(255)
  expires    DateTime  @db.Timestamptz(6)
  created_at DateTime? @default(now()) @db.Timestamptz(6)

  @@unique([identifier, token])
  @@index([expires], map: "idx_verification_tokens_expires")
  @@map("verification_tokens")
  @@schema("public")
}
